{"version":3,"file":"static/js/494.b729aa0b.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/filter/filterSelectors.js","components/ContactElement/ContactElement.styled.jsx","components/ContactElement/ContactElement.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = ({ contacts }) => contacts.items;\n\nexport const selectLoading = ({ contacts }) => contacts.isLoading;\n\nexport const selectError = ({ contacts }) => contacts.error;;\n\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormStyled = styled(Form)`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  margin-bottom: 16px;\n  align-items: center;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n`;\n\nexport const FieldStyled = styled(Field)`\n  padding: 10px;\n  border: 1px solid #f28f2c;\n  line-height: 1.11;\n  letter-spacing: 0.72px;\n  font-size: 20px;\n  color: #736c65;\n  font-weight: 600;\n\n  border-radius: 10px;\n  width: 400px;\n`;\n\nexport const Message = styled(ErrorMessage)`\n  font-size: 24px;\n  color: #f28f2c;\n`;\n\nexport const Button = styled.button`\n  padding: 10px 15px;\n  background-color: #eab886;\n  color: white;\n\n  border: none;\n  border-radius: 10px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  cursor: pointer;\n\n  font-size: 24px;\n\n  transition: background-color 0.3s ease, color 0.3s ease;\n  width: 280px;\n\n  &:active {\n    background-color: grey;\n  }\n`;","import { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\n\nimport {\n  FormStyled,\n  FieldStyled,\n  Message,\n  Label,\n  Button,\n} from './ContactForm.styled';\n\nconst schema = object().shape({\n  name: string()\n    .trim()\n    .matches(/^[a-zA-Z\\s]+$/, 'Invalid name format')\n    .required('This field is required'),\n  number: string()\n    .trim()\n    .matches(\n      /^[^a-zA-Z]*\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}[^a-zA-Z]*$/,\n      'Invalid phone number format'\n    )\n    .required('This field is required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={({ name, number }, actions) => {\n        if (\n          contacts.find(\n            ({ name: oldName }) => oldName.toLowerCase() === name.toLowerCase()\n          )\n        ) {\n          Report.success(\n            'Notiflix Success',\n            `${name} is already in contacts`,\n            'Okay'\n          );\n          actions.resetForm();\n          return;\n        }\n        if (\n          contacts.find(\n            ({ number: oldNumber }) =>\n              oldNumber.toLowerCase() === number.toLowerCase()\n          )\n        ) {\n          Report.success(\n            'Notiflix Success',\n            `${number} is already in contacts`,\n            'Okay'\n          );\n          actions.resetForm();\n          return;\n        }\n        Report.success(\n          'Notiflix Success',\n          `${name} added to your contact list`,\n          'Okay'\n        );\n\n        dispatch(addContact({ name, number }));\n        actions.resetForm();\n      }}\n    >\n      <FormStyled>\n        <div>\n          <Label htmlFor=\"name\">Please, enter name</Label>\n\n          <FieldStyled type=\"text\" name=\"name\" placeholder=\" \" />\n          <Message name=\"name\" component=\"div\"></Message>\n        </div>\n        <div>\n          <Label htmlFor=\"name\">Please, enter number</Label>\n\n          <FieldStyled type=\"text\" name=\"number\" placeholder=\" \" />\n          <Message name=\"number\" component=\"div\"></Message>\n        </div>\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n","export const selectFilter = ({ filter }) => filter.filter;","import styled from 'styled-components';\n\nexport const ContactElementBtn = styled.button`\n  display: inline-flex;\n  align-items: center;\n  text-transform: uppercase;\n  text-align: center;\n\n  color: grey;\n  text-shadow: 1px 1px 1px #d1c4c4;\n  background-color: white;\n\n  font-size: 16px;\n  margin-bottom: 20px;\n  margin-left: 20px;\n  padding: 8px;\n  border: 1px solid #f28f2c;\n\n  border-radius: 10px;\n  box-shadow: rgba(216, 225, 215, 0.24) 0px 3px 8px;\n`;\n","import { ContactElementBtn } from './ContactElement.styled';\n\n\nexport const ContactElement = ({ id, name, number, onDelete }) => {\n  \n\n  return (\n    <>\n      <li>\n        {' '}\n        {name}: {number}\n        <ContactElementBtn\n          type=\"button\"\n          onClick={() => onDelete(id)}\n        >\n        </ContactElementBtn>\n      </li>\n    </>\n  );\n};","import styled from 'styled-components';\n\nexport const ContactWrap = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  gap: 16px;\n  margin-top: 20px;\n  padding: 0;\n\n  list-style: none;\n`;\n\n// export const ContactListItem = styled.li``;\n\nexport const Span = styled.span`\n  font-size: 24px;\n  padding-right: 12px;\n`;\n\nexport const ContactListBtn = styled.button`\n  display: inline-flex;\n  align-items: center;\n  text-transform: uppercase;\n  text-align: center;\n\n  color: grey;\n  text-shadow: 1px 1px 1px #d1c4c4;\n  background-color: white;\n\n  font-size: 16px;\n  margin-bottom: 20px;\n  padding: 8px;\n  border: 1px solid #f28f2c;\n\n  border-radius: 10px;\n  box-shadow: rgba(216, 225, 215, 0.24) 0px 3px 8px;\n`;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from '../../redux/contacts/contactsOperations';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectLoading,\n  selectError,\n} from '../../redux/contacts/contactsSelectors';\nimport { selectFilter } from '../../redux/filter/filterSelectors';\n\nimport { ContactElement } from 'components/ContactElement/ContactElement';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { ContactWrap, ContactListBtn, Span } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n  const isError = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) => {\n      return name.toLowerCase().includes(normalizedFilter);\n    });\n  };\n\n  const activeContacts = filterContacts();\n  const isListEmpty = !activeContacts.length && !isLoading && !isError;\n\n  const deleteContactList = filterId => {\n    dispatch(deleteContact(filterId));\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {isListEmpty && <p>No contact details</p>}\n      {activeContacts.length > 0 && (\n        <ContactWrap>\n          {activeContacts.map(({ id, name, number }) => (\n            <ContactElement key={id} id={id}>\n              <Span>{name}:</Span>\n              <Span>{number}</Span>\n              <ContactListBtn type=\"button\" onDelete={() => deleteContactList}>\n                Delete\n              </ContactListBtn>\n            </ContactElement>\n          ))}\n        </ContactWrap>\n      )}\n    </>\n  );\n};\n","\nimport styled from 'styled-components';\n\nexport const Label = styled.label`\n  font-size: 20px;\n  color: #ec8014;\n`;\n\nexport const Input = styled.input`\n  padding: 10px;\n  border: 1px solid #f28f2c;\n  line-height: 1.11;\n  letter-spacing: 0.72px;\n  font-size: 20px;\n\n  color: #736c65;\n\n  border-radius: 10px;\n  width: 400px;\n`;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from '../../redux/filter/filterSelectors';\n\nimport { Label, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const onChangeFilter = e => {\n\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      <Label>\n        <Input\n          type=\"text\"\n          placeholder=\"Search\"\n          value={filter}\n          name=\"filter\"\n          id={filterId}\n          onChange={onChangeFilter}\n        />\n      </Label>\n    </>\n  );\n};\n","import { Navigate } from 'react-router-dom';\n\nimport { useAuth } from 'hooks/useAuth';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\n\nconst Contacts = ( ) => {\n  const { isLoggedIn} = useAuth();\n\n  return (\n    <>\n    {isLoggedIn ? (\n      <>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </>\n    ) : (\n      <Navigate to=\"/login\" />\n    )}\n  </>\n);\n};\n\nexport default Contacts\n"],"names":["selectContacts","_ref","contacts","items","selectLoading","_ref2","isLoading","selectError","_ref3","error","FormStyled","styled","Form","_templateObject","_taggedTemplateLiteral","Label","label","_templateObject2","FieldStyled","Field","_templateObject3","Message","ErrorMessage","_templateObject4","Button","button","_templateObject5","schema","object","shape","name","string","trim","matches","required","number","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","actions","find","oldName","toLowerCase","Report","success","concat","resetForm","oldNumber","addContact","children","_jsxs","htmlFor","type","placeholder","component","selectFilter","filter","ContactElementBtn","ContactElement","id","onDelete","_Fragment","onClick","ContactWrap","ul","Span","span","ContactListBtn","ContactList","isError","useEffect","fetchContacts","activeContacts","filterContacts","normalizedFilter","includes","isListEmpty","length","deleteContactList","filterId","deleteContact","Loader","map","Input","input","Filter","nanoid","value","onChange","e","setFilter","currentTarget","Contacts","isLoggedIn","useAuth","Navigate","to"],"sourceRoot":""}